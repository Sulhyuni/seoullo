<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.seoullo.member.mapper.MemberMapper">

	<!-- 운영자의 리스트 (아이디, 이름, 등급명, 상태, 나이)-->
	<select id="list" resultType="com.seoullo.member.vo.MemberVO">
		select id, name,  gradeName, status, <include refid="age" />
		from(
		select rownum rnum ,id, name, gradeName, status, <include refid="age" />
		from(
		select m.id,m.name,g.gradeName, m.status, <include refid="age" />
		from member m, grade g
		where (m.gradeNo=
		g.gradeNo)and not m.status in('탈퇴')
		<include refid="serch" />
		order by id asc
		)
		)
		where rnum between #{startRow} and #{endRow}
	</select>
	
	<!-- 가이드의 결제정보....리스트를....만들어야지... -->
		<select id="guideList" resultType="com.seoullo.member.vo.MemberVO" >
		select paymentNo, cardName, payMt, total, payDate
		from(
			select rownum rnum,paymentNo, cardName, payMt, total, payDate
		from(
			select paymentNo, cardName, payMt, total, payDate
			from guidePay
			where id=#{id} 
		)	
	)
			where rnum between #{startRow} and #{endRow}
		</select>
	
	<!-- 나이구하기 -->
	<sql id="age">
	SELECT TRUNC(MONTHS_BETWEEN(sysdate, age)/12) AS age
	FROM member
	WHERE id=#{id}
	</sql>
	
	<!-- getTotalRow -->
	<select id="getTotalRow" resultType="Long">
		select count(*)
		from board
		<include refid="serch" />

	</select>
	
	<!-- key&word 운영자가 id를 검색할때 -->
	<sql id="serch"> <!-- ''.toString()- '가운데 사이의 것을 문자열로 만들라는 뜻.' -->
		<if test="word !=null and word !=''.toString()">
			where 1= 0
			<if test="key.indexOf('t'.toString()) >=0 ">
			or id like '%' || #{word} || '%'
			</if>
		</if>
	</sql>

	<!-- 로그인 -->
	<select id="login" resultType="com.seoullo.member.vo.MemberVO">
		select m.id, m.name,
		g.gradeNo,g.gradeName
		from member m, grade g
		where (id = #{id} and
		pw=#{pw}) and (m.gradeNo = g.gradeNo) and not
		m.status in('탈퇴')
	</select>

	<!--상세보기 ,등급은 운영자만 봐야하나.... payday는 결제 시각까지-->
	<select id="view" resultType="com.seoullo.member.vo.MemberVO">
		select m.id, m.name, m.nickName,
		g.gradeNo, g.gradeName, m.status, m.tel, m.gender,
		<include refid="age"/>, p.total, p.cardName, p.cardNo, p.payMt,
		to_char(p.payDate,'yyyy-mm-dd')payDate
		from member m, grade
		g, payment p
		where id =#{id}
	</select>
	

	<!-- 아이디 찾기 -->
	<select id="findId" resultType="com.seoullo.member.vo.MemberVO">
		select id from member
		where name=#{name} and
		e_mail=#{e_mail} and not m.status in('탈퇴')
	</select>

	<!-- 비밀번호 찾기 -->
	<select id="findPw" resultType="com.seoullo.member.vo.MemberVO">
		select pw from member
		where id=#{id} and name=#{name}
		and e_mail=#{e_mail} and not m.status
		in('탈퇴')
	</select>
	
	<!-- 임시 비밀번호 발급 -->
	<update id="prePw">
		update member set pw=#{pw}
		where id=#{id} and not
		m.status in('탈퇴')
	</update>


	<!-- 비밀번호 변경 -->
	<update id="updatePw">
		update member set pw = #{pw}
		where id=#{id} and
		pw=#{pw} and not m.status in('탈퇴')
	</update>

	<!-- 일반회원 회원가입 -->
	<insert id="welcom">
		insert into member(id,pw,name,gradeNo,nickName,age,tel,e_mail,gender,regDate)
		values(#{id}, #{pw}, #{name},#{gradeNo}, #{nickName},#{age},#{tel} ,#{e_mail}, #{gender},#{regDate})
	</insert>

	<!-- 가이드 회원가입 -->
	<insert id="gWelcom">
		insert into member(id,name,gradeNo,nickName,age,pw,tel,paymentNo,e_mail,gender,regDate)
		values(#{id}, #{pw}, #{name}, #{nickName}, #{gender},#{e_mail},#{age},
		#{tel},#{sysdate},#{cardNo}, #{cardName}, #{payMt}, #{total},#{payDate})
	</insert>
	
	<!-- 가이드 결제 -->
	<insert id="guidePay">
		insert into guidePay(paymentNo,id,cardNo,cardName,gradeNo,payMt,payDate,total)
		values(guidePay_seq.nextval,#{id},#{cardNo},#{cardName},#{gradeNo},#{payMt},#{payDate},#{total})
	</insert>
	

	<!-- 아이디 증복확인 -->
	<select id="checkId" resultType="com.seoullo.member.vo.MemberVO">
		select id
		from member
		where id=#{id}
	</select>

	<!-- 닉네임 중복검사 -->
	<select id="checkNickName" resultType="com.seoullo.member.vo.MemberVO">
		select nickName
		from member
		where nickName =#{nickName}
	</select>

	<!--일반 / 가이드 회원정보 변경 -->
	<update id="update">
		update member set e_mail=#{e_mail}, tel=#{tel},
		nickName=#{nickName}
		where id=#{id} and pw=#{pw} and not m.status in('탈퇴')
	</update>

	<!-- 운영자의 회원정보 변경 -->
	<update id="updateAdmin">
		update member set e_mail=#{e_mail}, tel=#{tel},
		nickName=#{nickName},status = #{status}
		where id=#{id}
	</update>
	
	
	<!-- 회원탈퇴시 상태변경 -->
	<update id="delete">
		update member set status='탈퇴'
		where id=#{id} and
		pw=#{pw}
	</update>



</mapper>