package com.seoullo.member.controller;

import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.seoullo.member.service.MemberService;
import com.seoullo.member.vo.MemberVO;
import com.webjjang.util.PageObject;

import lombok.extern.log4j.Log4j;

@Controller
@RequestMapping("/member")
@Log4j
public class MemberController {
	// **휴면 계정만들어야함!!!!

	@Autowired
	@Qualifier("memberServiceImpl")
	private MemberService service;
	String mem = "member";

	// 로그인(memberVO)
	@GetMapping("/login.do")
	public String loginForm() {

		log.info("로그인 폼------------------------");

		return mem + "/login";
	}

	// 로그인 처리
	@PostMapping("/login.do")
	public String login(String id, String pw, HttpSession session, RedirectAttributes rttr) {
		log.info("로그인 처리...........");
		log.info("id=" + id + ",pw=" + pw);
		MemberVO vo = new MemberVO();
		vo.setId(id);
		vo.setPw(pw);

		session.setAttribute("login", service.login(vo));
		log.info("로그인 되었어요~~~");

		// 회원이 아니면 회원이 아니라고 표시해야함.
		if (session.getAttribute("login") == null || session.getAttribute("login").equals("id")) {
			rttr.addAttribute("msg", "아이디나 비밀번호를 다시 확인하여 입력해주세요");

			return mem + "/login";
		}

		// 메인으로
		return "redirect:/";

	}

	// 로그아웃 처리
	@GetMapping("/logout.do")
	public String logout(HttpSession session, RedirectAttributes rttr) {
		session.removeAttribute("login");

		// 로그아웃 되었을때 로그아웃 되었다고 메시지 하나 뜨게만들기!

		log.info("로그아웃 되었어요~~~");
		// 메인으로
		return "redirect:/";
	}
	
	// 가이드의 회원정보 쓰는 곳
		@GetMapping("/guideWelcom")
		public String guideWelcomForm(MemberVO vo) {
			log.info("가이드의 회원가입 폼===============");

			return mem + "/guideWelcom";
		}

		@PostMapping("/guideWelcom")
		public String guideWelcom(MemberVO vo) {
			log.info("가이드의 회원가입===============");
			service.guideWelcom(vo);
			return "/";
		}

		// 회원가입정보 쓰는 란
		//일반회원은 ... gradeNo를 넣어야하나...
		@GetMapping("/commonWelcom")
		public String commonWelcomForm(MemberVO vo) {
			vo.setGradeNo(1);
			log.info("일반 회원가입 폼===============");

			return mem + "/commonWelcom";
		}

		@PostMapping("/commonWelcom")
		public String commonWelcom(MemberVO vo) {
			log.info("일반회원의 회원가입===============");
			service.commonWelcom(vo);
			return "/";
		}
	
	

	// 운영자의 리스트 - id로 리스트를 뿌리고 운영자가 아니면 들어가지 못하게 하기.
	@GetMapping("/list.do")
	public String list(MemberVO vo, @ModelAttribute("pageObject") PageObject pageObject, Model model,
			HttpSession session, RedirectAttributes rttr) {
		vo.setId(((MemberVO) session.getAttribute("login")).getId());

		log.info("리스트 찍어요~~~");

		model.addAttribute("list", service.list(pageObject));
		// 정보를 10개씩 띄우기
		pageObject.setPerPageNum(10);

		return mem + "/list";
	}

	// 가이드의 결제 리스트
	@GetMapping("/guideList.do")
	public String guideList(String id, Model model, HttpSession session, RedirectAttributes rttr) {
		((MemberVO) session.getAttribute("login")).getId();
		List<MemberVO> list = service.guideList(id);
		log.info("가이드 리스트 찍어요~~~");
		model.addAttribute("list", list);
		return mem + "/guideList";
	}

	// 일반회원의 상세보기 (MemberVO, paynentVO)'
	@RequestMapping("/view.do")
	public String view(String id, HttpSession session, Model model) {
		((MemberVO) session.getAttribute("login")).getId();
		MemberVO vo = new MemberVO();
		vo.setId("admin");
		vo.setGradeNo(9);
		vo = service.view(id);
		log.info("상세보기로 이동합니다===========");
		model.addAttribute("vo", vo);

		return mem + "/view";
	}

	// 가이드상세보기 (MemberVO, paynentVO)'
	@RequestMapping("/guideView.do")
	public String guideView(String id, HttpSession session, Model model) {
		((MemberVO) session.getAttribute("login")).getId();
		MemberVO vo = new MemberVO();
		vo.setId("admin");
		vo.setGradeNo(9);
		vo = service.guideView(id);
		log.info("상세보기로 이동합니다===========");
		model.addAttribute("vo", vo);

		return mem + "/guideView";
	}

	// 가이드, 일반회원 정보변경
	// updateForm
	@GetMapping("/update.do")
	public String updateForm(String id, HttpSession session, Model model) {
		((MemberVO) session.getAttribute("login")).getId();

//		MemberVO vo = new MemberVO();
//		vo.setId("admin");
//		vo.setGradeNo(9);

		log.info("updateForm==========================");
		model.addAttribute("view", service.view(id));

		return mem + "/update";
	}

	// update
	@PostMapping("/update.do")
	public String update(MemberVO vo, HttpSession session, Model model) {
		log.info("update실행됨===============================");
		int result = service.update(vo);
		log.info("결과값= " + result);

		return "redirect:view.do?id=" + vo.getId() + "&gradeNo=" + vo.getGradeNo();

	}

	// 가이드, 일반회원 정보변경
	// updateForm
	@GetMapping("/guideUpdate.do")
	public String guideUpdateForm(String id, HttpSession session, Model model) {
		//운영자가 사용자의 정보를 수정하면 이상한가???
		((MemberVO) session.getAttribute("login")).getId();

//		MemberVO vo = new MemberVO();
//		vo.setId("admin");
//		vo.setGradeNo(9);

		log.info("updateForm==========================");
		model.addAttribute("vo", service.guideView(id));

		return mem + "/update";
	}

	// update
	@PostMapping("/guideUpdate.do")
	public String guideUpdate(MemberVO vo, String add,String e_mail, HttpSession session, Model model) {
		vo.setE_mail(e_mail+add); 
		log.info("update실행됨===============================");
		int result = service.update(vo);
		log.info("결과값= " + result);
		log.info("*********등급" + vo.getGradeNo());

		return "redirect:guideView.do?id=" + vo.getId() + "&gradeNo=" + vo.getGradeNo();

	}

	// 가이드 회원의 탈퇴
	@GetMapping("/guideDelete.do")
	public String guideDeleteForm(MemberVO vo, HttpSession session) {
		session.setAttribute("login", service.login(vo));
		log.info("가이드 회원의 탈퇴form=============================");
		return mem + "/guideDelete";
	}

	// 가이드 회원탈퇴
	@PostMapping("/guideDelete.do")
	public String guideDelete(MemberVO vo, HttpSession session) {
		log.info("가이드 회원의 탈퇴post=============================");
		int result = service.guideDelete(vo);
		log.info("결과값= " + result);

		// 탈퇴가 되면... 로그인을 끊어야하나??
		// session.removeAttribute("login");

		return "redirect:/";
	}

	// 가이드 회원의 탈퇴
	@GetMapping("/delete.do")
	public String deleteForm(MemberVO vo, HttpSession session) {
		session.setAttribute("login", service.login(vo));
		log.info(" 회원의 탈퇴form=============================");
		return mem + "/Delete";
	}

	// 일반회원 탈퇴
	@PostMapping("/delete.do")
	public String delete(MemberVO vo, HttpSession session) {
		log.info("회원의 탈퇴post=============================");
		int result = service.delete(vo);
		log.info("결과값= " + result);
		// session.removeAttribute("login");
		return "redirect:/";
	}

	
	@PostMapping(value = "/updateAdmin")
	@ResponseBody // 아작스를 쓸때 아작스의 정보를 받는 어노테이션
	public String updateAdmin(String id) {
		log.info("관리자의 상태변경중");
		int result = service.updateAdmin(id);
		log.info("결과값= " + result);
		if (result != 0) {
			return "fail"; // 정보변경이 안될때
		} else {

			return "success"; // 정보변경이 될때
		}
	}

	

	// 닉네임 중복검사
	@PostMapping(value = "/checkNickName")
	@ResponseBody // 아작스를 쓸때 아작스의 정보를 받는 어노테이션
	public String checkNickName(String nickName) {
		log.info("닉네임 중복검사");
		int result = service.checkNickName(nickName);
		log.info("결과값= " + result);
		if (result != 0) {
			return "fail"; // 중복된 닉네임이 존재할때
		} else {

			return "success"; // 중복되는게 없을때
		}
	}

	// 아이디 중복검사
	@PostMapping(value = "/checkId")
	@ResponseBody // 아작스를 쓸때 아작스의 정보를 받는 어노테이션
	public String checkId(String id) {
		log.info("아이디 중복검사");
		int result = service.checkId(id);
		log.info("결과값= " + result);
		if (result != 0) {
			return "fail"; // 중복된 닉네임이 존재할때
		} else {

			return "success"; // 중복되는게 없을때
		}

		


		// 아이디 찾기

		// 비밀번호 찾기

		// 잊어버린 비밀번호를 찾아서 임시받고 변경하는법

		// 회원의 비밀번호 변경하기

	}
}
