package com.seoullo.tour.controller;

import java.net.URLDecoder;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.seoullo.tour.service.TourService;
import com.seoullo.tour.vo.TourVO;

import lombok.extern.log4j.Log4j;

@RestController
@RequestMapping("/tourlist")
public class TourListController {

	@Autowired
	@Qualifier("TourServiceImpl")
	private TourService service;

	@PostMapping(value = "/arraybyhit.do", consumes = "application/json")
	public ResponseEntity<List<TourVO>> arrayByHit(@RequestBody String list) {

		List<TourVO> tourList = null;
		try {
			tourList = convert(list);
		} catch (Exception e) {
			return null;
		}
		Collections.sort(tourList, TourVO.byHit);
		return new ResponseEntity<List<TourVO>>(tourList, HttpStatus.OK);
	}

	@PostMapping(value = "/arraybyregdate.do", consumes = "application/json")
	public ResponseEntity<List<TourVO>> arrayByRegdate(@RequestBody String list) throws Exception {

		List<TourVO> tourList = null;
		try {
			tourList = convert(list);
		} catch (Exception e) {
			return null;
		}
		Collections.sort(tourList, TourVO.byRegdate);
		return new ResponseEntity<List<TourVO>>(tourList, HttpStatus.OK);
	}

	@PostMapping(value = "/exceptClosed.do", consumes = "application/json")
	public ResponseEntity<List<TourVO>> exceptClosed(@RequestBody String list) throws Exception {

		List<TourVO> tourList = null;
		try {
			tourList = convert(list);
		} catch (Exception e) {
			return null;
		}
		System.out.println(tourList);
		tourList.removeIf(i -> i.getStatus().equals("마감"));
		System.out.println(tourList);
		return new ResponseEntity<List<TourVO>>(tourList, HttpStatus.OK);
	}

	@RequestMapping(value = "/includeClosed.do")
	public ResponseEntity<List<TourVO>> includeClosed(String searchKey, String searchWord, String region)
			throws Exception {
		List<TourVO> list = service.list(searchKey, searchWord, region, 1);
		if (searchWord != null && searchWord != "") {
			if (searchKey.equals("title"))
				list = service.list(null, searchWord, region, 1);
			else if (searchKey.equals("tag"))
				list = service.list(searchWord, null, region, 1);
			else
				list = service.list(null, null, region, 1);
		} else
			list = service.list(null, null, region, 1);
		return new ResponseEntity<List<TourVO>>(list, HttpStatus.OK);
	}

	private List<TourVO> convert(String list) throws Exception {
		list = URLDecoder.decode(list, "UTF-8");
		List<TourVO> tourList = new ArrayList<TourVO>();
		// String으로 받은 list를 List<TourVO>로 변환
		String[] lists = list.substring(12, list.length() - 1).split(", TourVO");
		for (String str : lists) {
			TourVO vo = new TourVO();
			String[] strs = str.split(", ", 21);
			String var = strs[0].substring(strs[0].indexOf("=") + 1);
			vo.setNo(Long.parseLong(var));
			var = strs[1].substring(strs[1].indexOf("=") + 1);
			vo.setHit(Long.parseLong(var));

			// 날짜
			var = strs[2].substring(strs[2].indexOf("=") + 5);
			var = var.replace("Jan", "01");
			var = var.replace("Fab", "02");
			var = var.replace("Mar", "03");
			var = var.replace("Apr", "04");
			var = var.replace("May", "05");
			var = var.replace("Jun", "06");
			var = var.replace("Jul", "07");
			var = var.replace("Aug", "08");
			var = var.replace("Sep", "09");
			var = var.replace("Oct", "10");
			var = var.replace("Nov", "11");
			var = var.replace("Dec", "12");
			DateFormat df = new SimpleDateFormat("MM dd HH:mm:ss zzz yyyy");
			vo.setRegdate(df.parse(var));
			vo.setStatus(strs[3].substring(strs[3].indexOf("=") + 1));
			vo.setType(strs[4].substring(strs[4].indexOf("=") + 1));
			vo.setTitle(strs[5].substring(strs[5].indexOf("=") + 1));
			vo.setDescription(strs[6].substring(strs[6].indexOf("=") + 1));
			vo.setThumbnail(strs[9].substring(strs[9].indexOf("=") + 1));

			// 태그리스트
			String[] tags = strs[20].substring(strs[20].indexOf("[") + 1, strs[20].indexOf("]")).split(", ");
			vo.setTagList(Arrays.asList(tags));

			tourList.add(vo);
		}
		return tourList;
	}

}
