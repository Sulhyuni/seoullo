package com.seoullo.member.controller;

import java.util.List;



import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
//import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

//import com.seoullo.member.service.MailSendService;
import com.seoullo.member.service.MemberService;
import com.seoullo.member.vo.MemberVO;
import com.webjjang.util.PageObject;

import lombok.extern.log4j.Log4j;

@Controller
@RequestMapping("/member")
@Log4j
public class MemberController {
	// **휴면 계정만들어야함!!!!

	@Autowired
	@Qualifier("memberServiceImpl")
	private MemberService service;
	//private MailSendService mailService;
	String mem = "member";

	// 로그인(memberVO)
	@GetMapping("/login.do")
	public String loginForm() {

		log.info("로그인 폼------------------------");

		return mem + "/login";
	}

	// 로그인 처리
	@PostMapping("/login.do")
	public String login(String id, String pw, HttpSession session, RedirectAttributes rttr) {
		log.info("로그인 처리...........");
		log.info("id=" + id + ",pw=" + pw);
		MemberVO vo = new MemberVO();
		vo.setId(id);
		vo.setPw(pw);

		session.setAttribute("login", service.login(vo));
		log.info("로그인 되었어요~~~");

		// 회원이 아니면 회원이 아니라고 표시해야함.
		if (session.getAttribute("login") == null || session.getAttribute("login").equals("id")) {
			rttr.addAttribute("msg", "아이디나 비밀번호를 다시 확인하여 입력해주세요");

			return mem + "/login";
		}

		// 메인으로
		return "redirect:/";

	}

	// 로그아웃 처리
	@GetMapping("/logout.do")
	public String logout(HttpSession session, RedirectAttributes rttr) {
		session.removeAttribute("login");

		// 로그아웃 되었을때 로그아웃 되었다고 메시지 하나 뜨게만들기!

		log.info("로그아웃 되었어요~~~");
		// 메인으로
		return "redirect:/";
	}

	//회원가입 전단계(일반)
	@GetMapping("/checkPageCommon.do")
	public String checkPageCommon() {

		log.info("회원가입 전단계------------------------");

		return mem + "/checkPageCommon";
	}
	//가이드 회원가입 전단계
	@GetMapping("/checkGuideCommon.do")
	public String checkGuideCommon() {
		
		log.info("회원가입 전단계------------------------");
		
		return mem + "/checkGuideCommon";
	}
	
	// 가이드의 회원정보 쓰는 곳
	@GetMapping("/guideWelcom.do")
	public String guideWelcomForm(MemberVO vo) {
		log.info("가이드의 회원가입 폼===============");

		return mem + "/guideWelcom";
	}

	@PostMapping("/guideWelcom.do")
	public String guideWelcom(MemberVO vo) {
		log.info("가이드의 회원가입===============");
		service.guideWelcom(vo);
		return "/";
	}

	// 회원가입정보 쓰는 란
	// 일반회원은 ... gradeNo를 넣어야하나...
	@GetMapping("/commonWelcom.do")
	public String commonWelcomForm() {
		log.info("일반 회원가입 폼===============");

		return mem + "/commonWelcom";
	}

	@PostMapping("/commonWelcom.do")
	public String commonWelcom(MemberVO vo) {
		log.info("일반회원의 회원가입===============");
		service.commonWelcom(vo);
		
		return "redirect:/";
	}

	// 운영자의 리스트 - id로 리스트를 뿌리고 운영자가 아니면 들어가지 못하게 하기.
	@GetMapping("/list.do")
	public String list(String id, @ModelAttribute("pageObject") PageObject pageObject, Model model, HttpSession session,
			RedirectAttributes rttr) {
		MemberVO vo = (MemberVO) session.getAttribute("login");
		// id = vo.getId();
		vo.setGradeNo(9);

		log.info("리스트 찍어요~~~");

		model.addAttribute("list", service.list(pageObject));
		// 정보를 10개씩 띄우기
		pageObject.setPerPageNum(10);

		return mem + "/list";
	}

	// 상태변경
	@PostMapping("/updateAdmin.do")
	public String updateAdmin(String id, String status) {
		service.updateAdmin(id, status);
		return "redirect:list.do";
	}

	// 가이드의 결제 리스트
	@GetMapping("/guideList.do")
	public String guideList(String id, Model model, HttpSession session, RedirectAttributes rttr) {
		MemberVO vo = (MemberVO) session.getAttribute("login");
		if (vo.getGradeNo() == 2 || vo.getGradeNo() == 3) {

			id = vo.getId();
			vo = service.guideView(id);
		} else {

			List<MemberVO> list = service.guideList(id);
			log.info("가이드 리스트 찍어요~~~");
			model.addAttribute("list", list);
		}
		return mem + "/guideList";
	}

	// 일반회원의 상세보기 (MemberVO, paynentVO)'
	@RequestMapping("/view.do")
	public String view(String id, HttpSession session, Model model) {
		MemberVO vo = (MemberVO) session.getAttribute("login");
		if (vo.getGradeNo() == 1) {

			id = vo.getId();
		} else {
			log.info(vo);

			log.info("상세보기로 이동합니다===========");
		}
			model.addAttribute("vo", service.view(id));
			return mem + "/view";

	}

	// 가이드상세보기 (MemberVO, paynentVO)'
	@RequestMapping("/guideView.do")
	public String guideView(String id, HttpSession session, Model model) {
		MemberVO vo = (MemberVO) session.getAttribute("login");
		if (vo.getGradeNo() == 2 || vo.getGradeNo() == 3) {

			id = vo.getId();
			vo = service.guideView(id);
		} else {
			vo = service.guideView(id);
			log.info("상세보기로 이동합니다===========");
		}
		model.addAttribute("vo", vo);
		return mem + "/guideView";
	}

	// 가이드, 일반회원 정보변경
	// updateForm
	@GetMapping("/update.do")
	public String updateForm(String id, HttpSession session, Model model) {
		MemberVO vo = (MemberVO) session.getAttribute("login");
		if (vo.getGradeNo() == 1) {

			id = vo.getId();
		} else {
			log.info(vo);
		}
		MemberVO updateVO = service.view(id);
		// 이메일 아이디만 넘어가게 하기위해 작성 @부터 제거
		String email = updateVO.getEmail();
		if (email != null) {
			int idx = email.indexOf("@");
			if (idx != -1) {
				email = email.substring(0, idx);

			}
			updateVO.setEmail(email);
			log.info("updateForm==========================");
		}

		model.addAttribute("view", updateVO);
		return mem + "/update";

	}

	// update
	@PostMapping("/update.do")
	public String update(MemberVO vo, String add, String email, HttpSession session, Model model) {
		vo.setEmail(email + add);
		log.info("update실행됨===============================");
		int result = service.update(vo);
		return "redirect:view.do?id=" + vo.getId();

	}

	// 가이드, 일반회원 정보변경
	// updateForm
	@GetMapping("/guideUpdate.do")
	public String guideUpdateForm(String id, HttpSession session, Model model) {
		log.info("updateForm==========================");
		MemberVO vo = (MemberVO) session.getAttribute("login");
		if (vo.getGradeNo() == 2 || vo.getGradeNo() == 3) {

			id = vo.getId();
		} else {

			MemberVO guideUpdateVO = service.guideView(id);

			String email = guideUpdateVO.getEmail();
			if (email != null) {
				int idx = email.indexOf("@");
				if (idx != -1) {
					email = email.substring(0, idx);

				}

				guideUpdateVO.setEmail(email);
			}
			model.addAttribute("vo", guideUpdateVO);

		}
		return mem + "/update";
	}

	// update
	@PostMapping("/guideUpdate.do")
	public String guideUpdate(String id, String add, String email, HttpSession session) {
		MemberVO vo = new MemberVO();
		vo.setEmail(email + add);
		log.info("update실행됨===============================");
		int result = service.update(vo);
		log.info("결과값= " + result);
		log.info("*********등급" + vo.getGradeNo());

		return "redirect:guideView.do?id=" + vo.getId();

	}

//	// 가이드 회원의 탈퇴
//	@GetMapping("/guideDelete.do")
//	public String guideDeleteForm(String id, HttpSession session) {
//		MemberVO vo = (MemberVO) session.getAttribute("login");
//		id = vo.getId();
//
//		log.info("가이드 회원의 탈퇴form=============================");
//		
//		
//		return mem + "/guideDelete";
//	}
//
//	// 가이드 회원탈퇴
//	@PostMapping("/guideDelete.do")
//	public String guideDelete(MemberVO vo, HttpSession session) {
//
//		log.info("가이드 회원의 탈퇴post=============================");
//		int result = service.guideDelete(vo);
//		log.info("결과값= " + result);
//
//		// 탈퇴가 되면... 로그인을 끊어야하나??
//		// session.removeAttribute("login");
//
//		return "redirect:/";
//	}

	//회원의 탈퇴
	@GetMapping("/delete.do")
	public String deleteForm(String id, HttpSession session) {
		MemberVO vo = (MemberVO) session.getAttribute("login");
		id = vo.getId();
		log.info(" 회원의 탈퇴form=============================");
		return mem + "/delete.do";
	}

	// 일반회원 탈퇴
	@PostMapping("/delete.do")
	public String delete(String id, HttpSession session) {
		log.info("회원의 탈퇴post=============================");
		int result = service.delete(id);
		log.info("결과값= " + result);
		// session.removeAttribute("login");
		return "redirect:/";
	}

	
	// 아이디찾기
	@GetMapping("/findId.do")
	public String findIdForm(MemberVO vo) {

		return mem + "/findId";
	}

	@PostMapping("/findId.do")
	public String findId(String name, String email, Model model) {

		String id = service.findId(name, email);

		model.addAttribute("id", id);

		return mem + "/findId_result";
	}

	
//비밀번호찾기 폼
	@GetMapping("/findPw.do")
	public String findPwForm(MemberVO vo) {

		return mem + "/findPw";
	}

//비밀번호 찾기
	@PostMapping("/findPw.do")
	public String findPw(String id, String name, String email, Model model) {

		String pw = service.findPw(id, name, email);

		model.addAttribute("pw", pw);

		return mem + "/findPw_result";
	}

	// 비밀번호 수정
	@GetMapping("/updatePw.do")
	public String updatePwForm(String id, HttpSession session) {
		MemberVO vo = (MemberVO) session.getAttribute("login");
		id = vo.getId();
		log.info(" 회원의 비밀번호 수정form=============================");
		return mem + "/updatePw";
	}

	@PostMapping("/updatePw.do")
	public String updatePw(String id, Model model, HttpSession session) {

		int result = service.updatePw(id);

		log.info("result: " + result);
		// 비밀 번호를 바꾸면 로그아웃되어서 메인으로 가기
		session.removeAttribute("login");
		return "redirect:/";
	}
	
	//=======================================아작스 코드라인============================================================
//	//이메일 인증
//		@GetMapping(value ="/mailCheck")
//		@ResponseBody
//		public String mailCheck(String email) {
//			log.info("이메일 인증 요청이 들어옴!");
//			log.info("이메일 인증 이메일 : " + email);
//			
//			return mailService.joinEmail(email);
//		}
//	
	
//현재 비밀번호 체크
	@PostMapping(value = "/checkPw")
	@ResponseBody // 아작스를 쓸때 아작스의 정보를 받는 어노테이션
	public String checkPw(String id) {
		log.info("비밀번호 확인검사");
		int result = service.checkPW(id);
		log.info("결과값= " + result);
		if (result != 0) {
			return "fail"; // 아이디가 다를떼
		} else {

			return "success"; // 아이디가 같을때
		}
	}

	// 일반 회원가입
	// 가이드 회원가입

	// 닉네임 중복검사
	@PostMapping(value = "/checkNickName")
	@ResponseBody // 아작스를 쓸때 아작스의 정보를 받는 어노테이션
	public String checkNickName(String nickName) {
		log.info("닉네임 중복검사");
		int result = service.checkNickName(nickName);
		log.info("결과값= " + result);
		if (result != 0) {
			return "fail"; // 중복된 닉네임이 존재할때
		} else {

			return "success"; // 중복되는게 없을때
		}
	}

	// 아이디 중복검사
	@PostMapping(value = "/checkId")
	@ResponseBody // 아작스를 쓸때 아작스의 정보를 받는 어노테이션
	public String checkId(String id) {
		log.info("아이디 중복검사");
		int result = service.checkId(id);
		log.info("결과값= " + result);
		if (result != 0) {
			return "fail"; // 중복된 닉네임이 존재할때
		} else {

			return "success"; // 중복되는게 없을때
		}

		
	}
	
	
}
