package com.seoullo.tour.controller;

import java.io.File;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;

import com.seoullo.tour.service.TourService;
import com.seoullo.tour.vo.ScheduleVO;
import com.seoullo.tour.vo.TourVO;
import com.seoullo.tour.vo.TourdateVO;
import com.seoullo.tour.vo.TourpointVO;
import com.webjjang.util.PageObject;
import com.webjjang.util.file.FileUtil;

import lombok.extern.log4j.Log4j;

@Controller
@RequestMapping("/tour")
@Log4j
public class TourController {

	String path = "/upload/tour";

	@Autowired
	@Qualifier("TourServiceImpl")
	private TourService service;

	@RequestMapping("/list.do")
	public String list(PageObject pageObject, Model model) {
		model.addAttribute("list", service.list(null, null, 1, null, null));
		return "tour/list";
	}

	@RequestMapping("/view.do")
	public String view(Long no, Model model) {
		model.addAttribute("vo", service.view(no, 1));
		return "tour/view";
	}

	@GetMapping("/write.do")
	public String write(Model model) {
		return "tour/write";
	}

	@PostMapping("/write.do")
	public String write(MultipartFile thumbnailFile, MultipartFile mainImgFile, MultipartFile subImgFile, TourVO vo,
			int[] count, String[] day, Integer[] maxNum, Integer[] priceA, Integer[] priceB, Integer[] dayNum,
			Integer[] starthour, Integer[] startminute, String[] schedule, String[] schDescription,
			MultipartFile[] pointImageFile, String[] pointTitle, String[] pointContent, String[] tag,
			String[] checkpoint, HttpServletRequest request, Model model) throws Exception {
		try {
			// thumbnail, mainImg, subImg 저장 처리
			vo.setThumbnail(upload(path, thumbnailFile, request));
			vo.setMainImg(upload(path, mainImgFile, request));
			vo.setSubImg(upload(path, subImgFile, request));

			// tourdateList 세팅
			List<TourdateVO> tourdateList = new ArrayList<TourdateVO>();
			DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			for (int i = 0; i < count[0]; i++) {
				TourdateVO tourdateVO = new TourdateVO();
				tourdateVO.setDay(sdf.parse(day[0]));
				tourdateVO.setMaxNum(maxNum[i]);
				tourdateVO.setPriceA(priceA[i]);
				tourdateVO.setPriceB(priceB[i]);
				System.out.println(tourdateVO);
				tourdateList.add(tourdateVO);
			}
			vo.setTourdateList(tourdateList);

			// scheduleList 세팅
			List<ScheduleVO> scheduleList = new ArrayList<ScheduleVO>();
			int scheduleNum;
			int idx = 0;
			for (int i = 0; i < count[1]; i++) {
				scheduleNum = 0;
				for (int j = 0; j < count[2]; j++) {
					ScheduleVO scheduleVO = new ScheduleVO();
					scheduleVO.setDayNum(dayNum[i]);
					scheduleVO.setScheduleNum(++scheduleNum);
					scheduleVO.setStarthour(starthour[idx]);
					scheduleVO.setStartminute(startminute[idx]);
					scheduleVO.setSchedule(schedule[idx]);
					scheduleVO.setDescription(schDescription[idx++]);
					scheduleList.add(scheduleVO);
				}
			}
			vo.setScheduleList(scheduleList);

			// tourpoint 세팅
			List<TourpointVO> tourpointList = new ArrayList<TourpointVO>();
			System.out.println(count[3]);
			System.out.println(Arrays.toString(pointImageFile));
			for (int i = 0; i < count[3]; i++) {
				System.out.println(i);
				System.out.println(pointImageFile[i]);
				TourpointVO tourpointVO = new TourpointVO();
				tourpointVO.setImage(upload(path, pointImageFile[i], request));
				tourpointVO.setTitle(pointTitle[i]);
				tourpointVO.setContent(pointContent[i]);
				tourpointList.add(tourpointVO);
			}
			vo.setTourpointList(tourpointList);

			// tag 세팅
			List<String> tagList = new ArrayList<String>();
			for (int i = 0; i < count[4]; i++) {
				tagList.add(tag[i]);
			}
			vo.setTagList(tagList);

			// checkpoint 세팅
			List<String> checkpointList = new ArrayList<String>();
			for (int i = 0; i < count[5]; i++) {
				checkpointList.add(checkpoint[i]);
			}
			vo.setCheckpointList(checkpointList);

			model.addAttribute("vo", vo);
			service.write(vo);
		} catch (ParseException e) {
			System.out.println("parse 안됨");
		}
		return "tour/write";
	}

	public static String upload(final String PATH, MultipartFile multiFile, HttpServletRequest request)
			throws Exception {
		String fileFullName = "";
		if (multiFile != null && !multiFile.getOriginalFilename().equals("")) {
			String fileName = multiFile.getOriginalFilename();
			File saveFile = FileUtil.noDuplicate(FileUtil.getRealPath(PATH, fileName, request));
			fileFullName = PATH + "/" + saveFile.getName();
			multiFile.transferTo(saveFile);
		} else {
			fileFullName = PATH + "/" + "noImage.jpg";
		}
		return fileFullName;
	}
}
